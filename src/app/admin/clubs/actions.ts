
'use server';

import { z } from 'zod';
import { db } from '@/lib/firebase';
import { collection, addDoc, doc, updateDoc, serverTimestamp, getDoc, deleteDoc } from 'firebase/firestore';
import type { Team } from '@/types';

// Base schema for club data, ID is optional because it's not present when adding a new club.
export const clubFormSchema = z.object({
  id: z.string().optional(),
  name: z.string().min(3, { message: "El nombre del club debe tener al menos 3 caracteres." }),
  logoUrl: z.string().url({ message: "Debe ingresar una URL válida para el logo." }),
});

// Schema for adding a club (ID is not part of the input form, it's generated by Firestore)
export const addClubSchema = clubFormSchema.omit({ id: true });
export type AddClubFormInput = z.infer<typeof addClubSchema>;

// Schema for editing a club (ID is required to know which club to update)
export const editClubSchema = clubFormSchema.extend({
  id: z.string().min(1, { message: "ID del club es requerido para editar." }),
});
export type EditClubFormInput = z.infer<typeof editClubSchema>;


// Add Club Action
export async function addClubAction(data: AddClubFormInput) {
  try {
    const clubData = {
      ...data,
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp(),
    };
    const docRef = await addDoc(collection(db, "equipos"), clubData);
    console.log("Club añadido a Firestore con ID: ", docRef.id);
    
    // Return the newly created club with its ID
    const newClub = {
      id: docRef.id,
      ...data,
      // Timestamps will be Firestore ServerTimestamp objects, not directly usable as JS Date here
      // For client-side, you'd fetch and convert, or just rely on what was sent.
    } as Team; // Casting as Team, assuming player is not part of "equipos" doc initially

    return { success: true, message: `Club "${data.name}" añadido con ID: ${docRef.id}.`, club: newClub };
  } catch (error) {
    console.error("Error añadiendo club a Firestore: ", error);
    const errorMessage = error instanceof Error ? error.message : "Ocurrió un error desconocido.";
    return { success: false, message: `Error al añadir el club: ${errorMessage}` };
  }
}

// Update Club Action
export async function updateClubAction(data: EditClubFormInput) {
  const clubId = data.id;
  if (!clubId) {
    return { success: false, message: "ID del club no proporcionado." };
  }

  try {
    const clubRef = doc(db, "equipos", clubId);
    const updateData = {
      name: data.name,
      logoUrl: data.logoUrl,
      updatedAt: serverTimestamp(),
    };
    await updateDoc(clubRef, updateData);
    console.log(`Club con ID ${clubId} actualizado en Firestore.`);
    return { success: true, message: `Club "${data.name}" (ID: ${clubId}) actualizado.` };
  } catch (error) {
    console.error("Error actualizando club en Firestore: ", error);
    const errorMessage = error instanceof Error ? error.message : "Ocurrió un error desconocido.";
    return { success: false, message: `Error al actualizar el club: ${errorMessage}` };
  }
}

// Delete Club Action
export async function deleteClubAction(clubId: string) {
  if (!clubId) {
    return { success: false, message: "ID del club no proporcionado para eliminar." };
  }
  try {
    // First, check if the club exists to provide a more specific message
    const clubRef = doc(db, "equipos", clubId);
    const clubSnap = await getDoc(clubRef);

    if (!clubSnap.exists()) {
      return { success: false, message: `Club con ID ${clubId} no encontrado.` };
    }
    
    await deleteDoc(doc(db, "equipos", clubId));
    // Note: Deleting associated players in "jugadores" collection would require another step here.
    // For now, we only delete the club.
    console.log(`Club con ID ${clubId} eliminado de Firestore.`);
    return { success: true, message: `Club con ID ${clubId} eliminado.` };
  } catch (error) {
    console.error("Error eliminando club de Firestore: ", error);
    const errorMessage = error instanceof Error ? error.message : "Ocurrió un error desconocido.";
    return { success: false, message: `Error al eliminar el club: ${errorMessage}` };
  }
}
